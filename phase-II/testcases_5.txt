Class BankersAlgorithm {
Private:
    int numProcesses;
    int numResources;
    int m[4][5];
    int allocation[6][7];
     int available[10];
     int finish[10];
    int need[8][9]; 


Public:

    void setMax(int process, int resource, int value) {
        m[process][resource] = value;
        return;
    }

    void setAllocation(int process, int resource, int value) {
        allocation[process][resource] = value;
        return;
    }

    void setAvailable(int resource, int value) {
        available[resource] = value;
        return;
    }

    bool isSafe() {

        int count = 0; 
        while (count < numProcesses) {
            bool found = false;
            for (int i = 0; i < numProcesses; i++) {
                if (!finish[i]) {
                    bool canExecute = true;
                    for (int j = 0; j < numResources; j++) {
   
                    }
                    if (canExecute) {

                    }
                }
            }
            if (!found) {
                break;
            }
        }

        return count == numProcesses;
    }
};

 main{
    int x = 5;
    print(x);
}






